"""Update thickness measurement precision to 4 decimal places for safety-critical calculations

Revision ID: 840717ccf284
Revises: 37494688822b
Create Date: 2025-08-22 21:06:02.304883

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '840717ccf284'
down_revision: Union[str, None] = '37494688822b'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    # Skip dropping old tables to avoid foreign key constraint issues
    op.alter_column('api579_calculations', 'minimum_required_thickness',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Minimum required thickness (t_min) in inches',
               existing_nullable=False)
    op.alter_column('inspection_records', 'min_thickness_found',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Minimum thickness found - critical for fitness assessment',
               existing_nullable=False)
    op.alter_column('inspection_records', 'avg_thickness',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Average thickness across all CMLs',
               existing_nullable=False)
    op.alter_column('thickness_readings', 'thickness_measured',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               comment='Current measured thickness in inches (±0.0001 precision)',
               existing_comment='Current measured thickness in inches (±0.001 precision)',
               existing_nullable=False)
    op.alter_column('thickness_readings', 'previous_thickness',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Previous inspection thickness for corrosion rate calculation',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'design_thickness',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Original design thickness at this location',
               existing_nullable=False)
    op.alter_column('thickness_readings', 'metal_loss_total',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Total metal loss from original thickness (inches)',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'metal_loss_period',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Metal loss since previous inspection (inches)',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'temperature_compensation',
               existing_type=sa.NUMERIC(precision=6, scale=3),
               type_=sa.DECIMAL(precision=7, scale=4),
               existing_comment='Temperature compensation applied to measurement',
               existing_nullable=True)
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.alter_column('thickness_readings', 'temperature_compensation',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Temperature compensation applied to measurement',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'metal_loss_period',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Metal loss since previous inspection (inches)',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'metal_loss_total',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Total metal loss from original thickness (inches)',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'design_thickness',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Original design thickness at this location',
               existing_nullable=False)
    op.alter_column('thickness_readings', 'previous_thickness',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Previous inspection thickness for corrosion rate calculation',
               existing_nullable=True)
    op.alter_column('thickness_readings', 'thickness_measured',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               comment='Current measured thickness in inches (±0.001 precision)',
               existing_comment='Current measured thickness in inches (±0.0001 precision)',
               existing_nullable=False)
    op.alter_column('inspection_records', 'avg_thickness',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Average thickness across all CMLs',
               existing_nullable=False)
    op.alter_column('inspection_records', 'min_thickness_found',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Minimum thickness found - critical for fitness assessment',
               existing_nullable=False)
    op.alter_column('api579_calculations', 'minimum_required_thickness',
               existing_type=sa.DECIMAL(precision=7, scale=4),
               type_=sa.NUMERIC(precision=6, scale=3),
               existing_comment='Minimum required thickness (t_min) in inches',
               existing_nullable=False)
    op.create_table('api_requirements',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('requirement_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('standard_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('section', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('description', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('value', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('value_text', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('units', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('conditions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['standard_id'], ['api_standards.id'], name=op.f('api_requirements_standard_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('api_requirements_pkey')),
    sa.UniqueConstraint('requirement_id', name=op.f('api_requirements_requirement_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('document_storage',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('filename', sa.VARCHAR(length=255), autoincrement=False, nullable=False),
    sa.Column('file_type', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('file_size_bytes', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('file_content', postgresql.BYTEA(), autoincrement=False, nullable=False),
    sa.Column('content_hash', sa.VARCHAR(length=64), autoincrement=False, nullable=False),
    sa.Column('upload_timestamp', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('extracted_text', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('extraction_metadata', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('processing_status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='document_storage_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('api_formulas',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('formula_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('standard_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('section', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('formula_text', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('variables', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('units', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('applicable_conditions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['standard_id'], ['api_standards.id'], name=op.f('api_formulas_standard_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('api_formulas_pkey')),
    sa.UniqueConstraint('formula_id', name=op.f('api_formulas_formula_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    op.create_table('thickness_measurements',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('inspection_report_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('shell_course_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('measurement_location', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('elevation_ft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('thickness_in', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('measurement_method', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('measurement_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['shell_course_id'], ['shell_courses.id'], name=op.f('thickness_measurements_shell_course_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('thickness_measurements_pkey'))
    )
    op.create_table('tanks',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tank_id', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('facility_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('service', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('construction_year', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('design_standard', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('diameter_ft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('height_ft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('capacity_gallons', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('material_grade', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('joint_efficiency', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('corrosion_allowance_in', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('foundation_type', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='tanks_pkey'),
    sa.UniqueConstraint('tank_id', name='tanks_tank_id_key', postgresql_include=[], postgresql_nulls_not_distinct=False),
    postgresql_ignore_search_path=False
    )
    op.create_table('inspection_reports',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('document_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tank_id', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('inspection_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=False),
    sa.Column('inspection_type', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('inspector_name', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('inspector_certification', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('extraction_success', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('tanks_found', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['document_id'], ['document_storage.id'], name=op.f('inspection_reports_document_id_fkey')),
    sa.ForeignKeyConstraint(['tank_id'], ['tanks.id'], name=op.f('inspection_reports_tank_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('inspection_reports_pkey'))
    )
    op.create_table('shell_courses',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tank_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('course_number', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('height_from_bottom_ft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('plate_height_ft', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('original_thickness_in', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('material_grade', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tank_id'], ['tanks.id'], name=op.f('shell_courses_tank_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('shell_courses_pkey'))
    )
    op.create_table('api_standards',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('standard_code', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('revision', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('publication_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('status', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.PrimaryKeyConstraint('id', name='api_standards_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_table('compliance_calculations',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('tank_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('inspection_report_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('calculation_date', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.Column('corrosion_rate_mpy', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('product_specific_gravity', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('operating_temperature_f', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('environmental_risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('protective_systems', sa.VARCHAR(length=100), autoincrement=False, nullable=True),
    sa.Column('remaining_corrosion_allowance_mils', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('remaining_life_years', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('internal_inspection_interval_years', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('external_inspection_interval_years', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('overall_risk_level', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('compliance_status', sa.BOOLEAN(), autoincrement=False, nullable=True),
    sa.Column('formulas_used', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('calculation_steps', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('non_compliance_reasons', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('recommendations', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('immediate_actions', postgresql.ARRAY(sa.VARCHAR()), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['tank_id'], ['tanks.id'], name=op.f('compliance_calculations_tank_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('compliance_calculations_pkey'))
    )
    op.create_table('api_tables',
    sa.Column('id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('table_id', sa.VARCHAR(length=50), autoincrement=False, nullable=False),
    sa.Column('standard_id', sa.UUID(), autoincrement=False, nullable=False),
    sa.Column('section', sa.VARCHAR(length=20), autoincrement=False, nullable=False),
    sa.Column('title', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('table_data', postgresql.JSON(astext_type=sa.Text()), autoincrement=False, nullable=False),
    sa.Column('notes', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['standard_id'], ['api_standards.id'], name=op.f('api_tables_standard_id_fkey')),
    sa.PrimaryKeyConstraint('id', name=op.f('api_tables_pkey')),
    sa.UniqueConstraint('table_id', name=op.f('api_tables_table_id_key'), postgresql_include=[], postgresql_nulls_not_distinct=False)
    )
    # ### end Alembic commands ###